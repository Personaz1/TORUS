#!/usr/bin/env python3
"""
Quick TORUS Test - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

import torch
import torch.nn as nn

class MockUNet(nn.Module):
    def __init__(self):
        super().__init__()
        self.in_channels = 3
        self.out_channels = 3
        self.conv = nn.Conv2d(3, 3, 3, padding=1)
        
    def forward(self, sample, timestep, return_dict=True):
        x = self.conv(sample)
        if return_dict:
            return type('Output', (), {'sample': x})()
        return x

def quick_test():
    print("=== –ë–´–°–¢–†–´–ô –¢–ï–°–¢ TORUS ===")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TORUS
    from toroidal_diffusion_wrapper import ToroidalDiffusionModel
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    base_model = MockUNet()
    scheduler = type('Scheduler', (), {'timesteps': torch.tensor([1])})()
    
    model = ToroidalDiffusionModel(
        base_model=base_model,
        scheduler=scheduler,
        enable_singularity=True,
        enable_coherence_monitoring=True
    )
    
    print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {sum(p.numel() for p in model.parameters()):,} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º forward pass
    test_input = torch.randn(1, 3, 32, 32)
    output = model(test_input, torch.tensor([500]))
    
    print(f"‚úÖ Forward pass: {output['sample'].shape}")
    print("üéâ TORUS –†–ê–ë–û–¢–ê–ï–¢!")
    
    return True

if __name__ == "__main__":
    quick_test() 